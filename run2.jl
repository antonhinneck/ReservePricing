ss = 1.0
include("load_data.jl")

include("models/dccc.jl")
m_dccc = build_dccc(generators, buses, lines, uRESs)
optimize!(m_dccc)
z1 = objective_value(m_dccc)
termination_status(m_dccc)
γ = dual.(m_dccc[:γ])
z1p = get_payments(m_dccc)
lmp1 = dual.(m_dccc[:mc])

include("models/dccc_cheb.jl")
m_dccc_cheb = build_dccc_cheb(generators, buses, lines, uRESs)
optimize!(m_dccc_cheb)
z1c = objective_value(m_dccc_cheb)
termination_status(m_dccc_cheb)
γc = dual.(m_dccc_cheb[:γ])
z1cp = get_payments(m_dccc_cheb)
lmp1c = dual.(m_dccc_cheb[:mc])

include("models/dccc_n2n.jl")
m_dccc_n2n = build_dccc_n2n(generators, buses, lines, uRESs)
optimize!(m_dccc_n2n)
z3 = objective_value(m_dccc_n2n)
termination_status(m_dccc_n2n)
χ = dual.(m_dccc_n2n[:χ])
z3p = get_payments(m_dccc_n2n)
lmp3 = dual.(m_dccc_n2n[:mc])

include("models/dccc_n2n_cheb.jl")
m_dccc_n2n_cheb = build_dccc_n2n_cheb(generators, buses, lines, uRESs)
optimize!(m_dccc_n2n_cheb)
z3c = objective_value(m_dccc_n2n_cheb)
termination_status(m_dccc_n2n_cheb)
χc = dual.(m_dccc_n2n_cheb[:χ])
z3cp = get_payments(m_dccc_n2n_cheb)
lmp3c = dual.(m_dccc_n2n_cheb[:mc])

include("models/dccc_a_apx.jl")
m_dccc_a_apx = build_dccc_a_apx(generators, buses, lines, uRESs, αm_min = zeros(n_generators), αp_min = zeros(n_generators), cheb = false)
optimize!(m_dccc_a_apx)
termination_status(m_dccc_a_apx)
z2apx = objective_value(m_dccc_a_apx)
value(m_dccc_a_apx[:det_c])
value(m_dccc_a_apx[:d_lin])
value(m_dccc_a_apx[:d_con])
value(m_dccc_a_apx[:d_quad])
value(m_dccc_a_apx[:unc_c])
value(m_dccc_a_apx[:d_bil])
value.(m_dccc_a_apx[:αm])
value.(m_dccc_a_apx[:αp])
sum(value.(m_dccc_a_apx[:p]))
value.(m_dccc_a_apx[:p])
d2 = dual.(m_dccc_a_apx[:γm])
d2 = dual.(m_dccc_a_apx[:γp])
value.(m_dccc_a_apx[:p])

include("models/dccc_a_det.jl")
m_dccc_a_det = build_dccc_a_det(generators, buses, lines, uRESs; pdet = value.(m_dccc_a_apx[:p]))
# m_dccc_a_det = build_dccc_a_det(generators, buses, lines, uRESs; apdet = apdet, amdet = amdet)
# m_dccc_a_det = build_dccc_a_det(generators, buses, lines, uRESs)
optimize!(m_dccc_a_det)
termination_status(m_dccc_a_det)
z2 = objective_value(m_dccc_a_det)
z2s = objective_value(m_dccc_a_det) - value(m_dccc_a_det[:unc_c])
value(m_dccc_a_det[:det_c])
value(m_dccc_a_det[:d_lin])
value(m_dccc_a_det[:d_con])
value(m_dccc_a_det[:d_quad])
value(m_dccc_a_det[:u_quads_m])
value(m_dccc_a_det[:u_quads_p])
value(m_dccc_a_det[:u_quadm_m])
value(m_dccc_a_det[:u_quadm_p])
value(m_dccc_a_det[:unc_c])
γm = dual.(m_dccc_a_det[:γm])
γp = dual.(m_dccc_a_det[:γp])
dual_objective_value(m_dccc_a_det)
dual.(m_dccc_a_det[:mc])

include("models/dccc_a_det_falpha.jl")
m_dccc_a_det_falpha = build_dccc_a_det_falpha(generators, buses, lines, uRESs; apdet = value.(m_dccc_a_det[:αp]), amdet = value.(m_dccc_a_det[:αm]))
optimize!(m_dccc_a_det_falpha)
termination_status(m_dccc_a_det_falpha)
z2 = objective_value(m_dccc_a_det_falpha)
z2p = get_payments(m_dccc_a_det_falpha)
lmp2 = dual.(m_dccc_a_det_falpha[:mc])

include("models/dccc_a_apx.jl")
m_dccc_a_apx = build_dccc_a_apx(generators, buses, lines, uRESs, αm_min = zeros(n_generators), αp_min = zeros(n_generators))
optimize!(m_dccc_a_apx)
termination_status(m_dccc_a_apx)
z2apx = objective_value(m_dccc_a_apx)
value(m_dccc_a_apx[:det_c])
value(m_dccc_a_apx[:d_lin])
value(m_dccc_a_apx[:d_con])
value(m_dccc_a_apx[:d_quad])
value(m_dccc_a_apx[:unc_c])
value(m_dccc_a_apx[:d_bil])
value.(m_dccc_a_apx[:αm])
value.(m_dccc_a_apx[:αp])
sum(value.(m_dccc_a_apx[:p]))
value.(m_dccc_a_apx[:p])
d2 = dual.(m_dccc_a_apx[:γm])
d2 = dual.(m_dccc_a_apx[:γp])
value.(m_dccc_a_apx[:p])

include("models/dccc_a_det_cheb.jl")
m_dccc_a_det_cheb = build_dccc_a_det_cheb(generators, buses, lines, uRESs, value.(m_dccc_a_apx[:p]))
optimize!(m_dccc_a_det_cheb)
termination_status(m_dccc_a_det_cheb)
z2c = objective_value(m_dccc_a_det_cheb)
z2c_d = objective_value(m_dccc_a_det_cheb) - value(m_dccc_a_det_cheb[:unc_c])
value(m_dccc_a_det_cheb[:det_c])
value(m_dccc_a_det_cheb[:d_lin])
value(m_dccc_a_det_cheb[:d_con])
value(m_dccc_a_det_cheb[:d_quad])
value(m_dccc_a_det_cheb[:u_quads_m])
value(m_dccc_a_det_cheb[:u_quads_p])
value(m_dccc_a_det_cheb[:d_bil])
# value(m_dccc_a_det_cheb[:u_quadm_m])
# value(m_dccc_a_det_cheb[:u_quadm_p])
value(m_dccc_a_det_cheb[:unc_c])
#value(m_dccc_a_det_cheb[:d_bil])
γmc = dual.(m_dccc_a_det_cheb[:γm])
γpc = dual.(m_dccc_a_det_cheb[:γp])

include("models/dccc_a_det_falpha.jl")
m_dccc_a_det_falpha = build_dccc_a_det_falpha(generators, buses, lines, uRESs; apdet = value.(m_dccc_a_det_cheb[:αp]), amdet = value.(m_dccc_a_det_cheb[:αm]), cheb = true)
optimize!(m_dccc_a_det_falpha)
z2c = objective_value(m_dccc_a_det_falpha)
termination_status(m_dccc_a_det_falpha)
objective_value(m_dccc_a_det_falpha)
dual.(m_dccc_a_det_falpha[:mc])
z2cp = get_payments(m_dccc_a_det_falpha)
lmp2c = dual.(m_dccc_a_det_falpha[:mc])

α_min_initm = zeros((n_generators, n_farms)) .+ 0.0 # value.(m_dccc_n2n_det[:α]) # ones((n_generators, n_farms)) * 0.01
α_max_initm = ones((n_generators, n_farms)) * 1.0
α_min_initp = zeros((n_generators, n_farms)) .+ 0.0# value.(m_dccc_n2n_det[:α]) # ones((n_generators, n_farms)) * 0.01
α_max_initp = ones((n_generators, n_farms)) * 1.0

include("models/dccc_n2n_a_apx_alpha.jl")
m_dccc_n2n_a_apx_alpha = build_dccc_n2n_a_apx_alpha(generators, buses, lines, uRESs, α_min_initm, α_max_initm, α_min_initp, α_max_initp, cheb = false)
optimize!(m_dccc_n2n_a_apx_alpha)
objective_value(m_dccc_n2n_a_apx_alpha)
termination_status(m_dccc_n2n_a_apx_alpha)
value(m_dccc_n2n_a_apx_alpha[:det_c])
value(m_dccc_n2n_a_apx_alpha[:d_lin])
value(m_dccc_n2n_a_apx_alpha[:d_con])
value(m_dccc_n2n_a_apx_alpha[:d_quad])
value(m_dccc_n2n_a_apx_alpha[:unc_c])
value(m_dccc_n2n_a_apx_alpha[:u_bil])
d41 = dual.(m_dccc_n2n_a_apx_alpha[:χp])
d42 = dual.(m_dccc_n2n_a_apx_alpha[:χm])

α_detm = value.(m_dccc_n2n_a_apx_alpha[:αm])
α_detp = value.(m_dccc_n2n_a_apx_alpha[:αp])
p_det = value.(m_dccc_n2n_a_apx_alpha[:p])

include("models/dccc_n2n_a_det_p.jl")
m_dccc_n2n_a_det_p = build_dccc_n2n_a_det_p(generators, buses, lines, uRESs, p_det)
optimize!(m_dccc_n2n_a_det_p)
termination_status(m_dccc_n2n_a_det_p)
z4 = objective_value(m_dccc_n2n_a_det_p)
z4s = objective_value(m_dccc_n2n_a_det_p) - value(m_dccc_n2n_a_det_p[:unc_c])
value(m_dccc_n2n_a_det_p[:det_c])
value(m_dccc_n2n_a_det_p[:d_lin])
value(m_dccc_n2n_a_det_p[:d_con])
value(m_dccc_n2n_a_det_p[:d_quad])
value(m_dccc_n2n_a_det_p[:unc_c])
value(m_dccc_n2n_a_det_p[:u_quad])
value(m_dccc_n2n_a_det_p[:u_bil])
χ1up = dual.(m_dccc_n2n_a_det_p[:χp])
χ1um = dual.(m_dccc_n2n_a_det_p[:χm])

include("models/dccc_n2n_a_det_p_falpha.jl")
m_dccc_n2n_a_det_p_falpha = build_dccc_n2n_a_det_p_fa(generators, buses, lines, uRESs, abs.(value.(m_dccc_n2n_a_det_p[:αm])), abs.(value.(m_dccc_n2n_a_det_p[:αp])), cheb = false)
optimize!(m_dccc_n2n_a_det_p_falpha)
termination_status(m_dccc_n2n_a_det_p_falpha)
objective_value(m_dccc_n2n_a_det_p_falpha)
z4 = objective_value(m_dccc_n2n_a_det_p_falpha)
z4p = get_payments(m_dccc_n2n_a_det_p_falpha)
lmp4 = dual.(m_dccc_n2n_a_det_p_falpha[:mc])

include("models/dccc_n2n_a_apx_alpha.jl")
m_dccc_n2n_a_apx_alpha = build_dccc_n2n_a_apx_alpha(generators, buses, lines, uRESs, α_min_initm, α_max_initm, α_min_initp, α_max_initp, cheb = true)
optimize!(m_dccc_n2n_a_apx_alpha)
objective_value(m_dccc_n2n_a_apx_alpha)
termination_status(m_dccc_n2n_a_apx_alpha)
value(m_dccc_n2n_a_apx_alpha[:det_c])
value(m_dccc_n2n_a_apx_alpha[:d_lin])
value(m_dccc_n2n_a_apx_alpha[:d_con])
value(m_dccc_n2n_a_apx_alpha[:d_quad])
value(m_dccc_n2n_a_apx_alpha[:unc_c])
value(m_dccc_n2n_a_apx_alpha[:u_bil])
d41 = dual.(m_dccc_n2n_a_apx_alpha[:χp])
d42 = dual.(m_dccc_n2n_a_apx_alpha[:χm])

α_detm = value.(m_dccc_n2n_a_apx_alpha[:αm])
α_detp = value.(m_dccc_n2n_a_apx_alpha[:αp])
p_det = value.(m_dccc_n2n_a_apx_alpha[:p])

include("models/dccc_n2n_a_det_p_cheb.jl")
m_dccc_n2n_a_det_p_cheb = build_dccc_n2n_a_det_p_cheb(generators, buses, lines, uRESs, p_det)
optimize!(m_dccc_n2n_a_det_p_cheb)
termination_status(m_dccc_n2n_a_det_p_cheb)
z4c = objective_value(m_dccc_n2n_a_det_p_cheb)
z4c_d = objective_value(m_dccc_n2n_a_det_p_cheb) - value(m_dccc_n2n_a_det_p_cheb[:unc_c])
value(m_dccc_n2n_a_det_p_cheb[:det_c])
value(m_dccc_n2n_a_det_p_cheb[:d_lin])
value(m_dccc_n2n_a_det_p_cheb[:d_con])
value(m_dccc_n2n_a_det_p_cheb[:d_quad])
value(m_dccc_n2n_a_det_p_cheb[:unc_c])
χ1up_cheb = dual.(m_dccc_n2n_a_det_p_cheb[:χp])
χ1um_cheb = dual.(m_dccc_n2n_a_det_p_cheb[:χm])

include("models/dccc_n2n_a_det_p_falpha.jl")
m_dccc_n2n_a_det_p_falpha = build_dccc_n2n_a_det_p_fa(generators, buses, lines, uRESs, abs.(value.(m_dccc_n2n_a_det_p_cheb[:αm])), abs.(value.(m_dccc_n2n_a_det_p_cheb[:αp])), cheb = true)
optimize!(m_dccc_n2n_a_det_p_falpha)
termination_status(m_dccc_n2n_a_det_p_falpha)
objective_value(m_dccc_n2n_a_det_p_falpha)
z4c = objective_value(m_dccc_n2n_a_det_p_falpha)
z4cp = get_payments(m_dccc_n2n_a_det_p_falpha)
lmp4c = dual.(m_dccc_n2n_a_det_p_falpha[:mc])

sched_gen = sum(value.(m_dccc_n2n_a_det_p_cheb[:p]))
ures_gen = sum([my_u.forecast for my_u in uRESs])
total_load = sum(d)
ures_pen = ures_gen / total_load

using PyPlot

fig = figure(figsize=(2.8, 2.0))
rc("font", family = "serif", style = "italic", size = 12)
rc("text", usetex = true)
rc("lines", linewidth = 1)

ax = fig.add_axes([0.20,0.23,0.78,0.76])
grid(linewidth = 0.1, linestyle = (0, (20, 20)), color = "lightgray", axis = "y")
ax.tick_params(direction = "in", top = true, right = true, width = 1.4,length = 2.0)

xlabel("Balancing Framework")
ylim(bottom = 40, top = 280)
#ylim(bottom = 65, top = 100)
#ylim(bottom = 65, top = 128)
#xlim(left = 1, right = n_generators)
ylabel("\$z^{*} [1000\\\$]\$")
yticks([60,80,100,120,140,160], labels = ["60","80","100","120","140","160"])
xticks([2,6,10,14], labels = ["S-SW","A-SW","S-N2N","A-N2N"])
#yticks([120,125,130], labels = ["120","125","130"])
#yticks([110,115,120], labels = ["110","115","120"])
#yticks([105,110,115,120,125], labels = ["105","110","115","120","125"])
#yticks([75,80,85], labels = ["75","80","85"])

#bar([3,7,11,15], [z1c_d, z2c_d, z3c_d, z4c_d] ./ 1000, color = "mediumblue", width = 0.6, label = "Chebychev, scheduled")
#bar([1,9], [z1ns, z3ns] ./ 1000, color = "silver", width = 0.6, label = "SOC, scheduled")
#bar([2,6,10,14], [z1s, z2s, z3s, z4s] ./ 1000, color = "coral", width = 0.6, label = "Non-Convex, scheduled")
#bar([1,2,3,6,7,9,10,11,14,15], [z1n, z1, z1c, z2, z2c, z3n, z3, z3c,z4,z4c] ./ 1000, color = "black", width = 0.15, label = "Obj. with balancing")

bar([1,5,9,13], [z1c, z2c, z3c, z4c] ./ 1000, color = [70,80,190] ./ 255, width = 1.0, label = "\$z^{*}\$")
bar([2,6,10,14], [z1cp[1], z2cp[1], z3cp[1], z4cp[1]] ./ 1000, color = [122,1,119] ./ 255, width = 1.0, label = "\$\\lambda D\$")
bar([3,7,11,15], [z1cp[2] + z1cp[3], z2cp[2] + z2cp[3], z3cp[2] + z3cp[3], z4cp[2] + z4cp[3]] ./ 1000, color = [15,170,160] ./ 255, width = 1.0,label = "\$\\lambda W\$" )
bar([3,7,11,15], [z1cp[3], z2cp[3], z3cp[3], z4cp[3]] ./ 1000, color = [40,190,90] ./ 255, width = 1.0,label = "\$\\sum_{i}\\Pi_{i}\$" )
#annotate("infeas.", [2.0 - 0.6, 52], rotation = 90, color = "black")
#annotate("infeas.", [6.0 - 0.6, 52], rotation = 90, color = "black")

legend(loc = "upper right", fancybox = false, edgecolor = "black", framealpha = 0.9, ncol = 2)
savefig(string("plots_final//payments$(ures_pen).pdf"), format = :pdf)


##----------------------------
##----------------------------

fig = figure(figsize=(6.0, 2.0))
rc("font", family = "serif", style = "italic", size = 12)
rc("text", usetex = true)
rc("lines", linewidth = 1)

ax = fig.add_axes([0.07,0.23,0.92,0.76])
grid(linewidth = 0.1, linestyle = (0, (20, 20)), color = "lightgray", axis = "y")
ax.tick_params(direction = "in", top = true, right = true, width = 1.4,length = 2.0)

xlabel("Balancing Framework")
ylim(bottom = 4000, top = 4058)
#ylim(bottom = 3800, top = 4120)
#ylim(bottom = 65, top = 100)
#ylim(bottom = 65, top = 128)
#xlim(left = 1, right = n_generators)
#ylabel("\$z^{*} [1000\\\$]\$")
#yticks([60,80,100,120,140,160], labels = ["60","80","100","120","140","160"])
#xticks([2,6,10,14], labels = ["S-SW","A-SW","S-N2N","A-N2N"])
#yticks([120,125,130], labels = ["120","125","130"])
#yticks([110,115,120], labels = ["110","115","120"])
#yticks([105,110,115,120,125], labels = ["105","110","115","120","125"])
#yticks([75,80,85], labels = ["75","80","85"])

#bar([3,7,11,15], [z1c_d, z2c_d, z3c_d, z4c_d] ./ 1000, color = "mediumblue", width = 0.6, label = "Chebychev, scheduled")
#bar([1,9], [z1ns, z3ns] ./ 1000, color = "silver", width = 0.6, label = "SOC, scheduled")
#bar([2,6,10,14], [z1s, z2s, z3s, z4s] ./ 1000, color = "coral", width = 0.6, label = "Non-Convex, scheduled")
#bar([1,2,3,6,7,9,10,11,14,15], [z1n, z1, z1c, z2, z2c, z3n, z3, z3c,z4,z4c] ./ 1000, color = "black", width = 0.15, label = "Obj. with balancing")

bar([i for i in 1:118], -lmp2c, color = [40,40,120] ./ 255, width = 0.8, label = "SW-AB")
# bar([i for i in 1:118], -lmp1c, color = [80,255,190] ./ 255, width = 0.8, label = "SW-S, N2N-S")
# bar([i for i in 1:118], -lmp4c, color = [70,120,255] ./ 255, width = 0.8, label = "N2N-AB")

bar([i for i in 1:118], -lmp4, color = [70,120,255] ./ 255, width = 0.8, label = "N2N-AB")
bar([i for i in 1:118], -lmp1, color = [80,255,190] ./ 255, width = 0.8, label = "SW-S, N2N-S")
bar([i for i in 1:118], -lmp2, color = [40,40,120] ./ 255, width = 0.8, label = "SW-AB")

legend(loc = "upper right", fancybox = false, edgecolor = "black", framealpha = 0.9, ncol = 3)
savefig(string("plots_final//lmps$(ures_pen).pdf"), format = :pdf)



using PyPlot

fig = figure(figsize=(2.8, 2.0))
rc("font", family = "serif", style = "italic", size = 12)
rc("text", usetex = true)
rc("lines", linewidth = 1)

ax = fig.add_axes([0.20,0.23,0.78,0.76])
grid(linewidth = 0.1, linestyle = (0, (20, 20)), color = "lightgray", axis = "y")
ax.tick_params(direction = "in", top = true, right = true, width = 1.4,length = 2.0)

xlabel("Balancing Framework")
ylim(bottom = 40, top = 280)
#ylim(bottom = 65, top = 100)
#ylim(bottom = 65, top = 128)
#xlim(left = 1, right = n_generators)
ylabel("\$z^{*} [1000\\\$]\$")
yticks([60,80,100,120,140,160], labels = ["60","80","100","120","140","160"])
xticks([2,6,10,14], labels = ["S-SW","A-SW","S-N2N","A-N2N"])
#yticks([120,125,130], labels = ["120","125","130"])
#yticks([110,115,120], labels = ["110","115","120"])
#yticks([105,110,115,120,125], labels = ["105","110","115","120","125"])
#yticks([75,80,85], labels = ["75","80","85"])

#bar([3,7,11,15], [z1c_d, z2c_d, z3c_d, z4c_d] ./ 1000, color = "mediumblue", width = 0.6, label = "Chebychev, scheduled")
#bar([1,9], [z1ns, z3ns] ./ 1000, color = "silver", width = 0.6, label = "SOC, scheduled")
#bar([2,6,10,14], [z1s, z2s, z3s, z4s] ./ 1000, color = "coral", width = 0.6, label = "Non-Convex, scheduled")
#bar([1,2,3,6,7,9,10,11,14,15], [z1n, z1, z1c, z2, z2c, z3n, z3, z3c,z4,z4c] ./ 1000, color = "black", width = 0.15, label = "Obj. with balancing")

bar([1,5,9,13], [z1c, z2c, z3c, z4c] ./ 1000, color = [70,80,190] ./ 255, width = 1.0, label = "\$z^{*}\$")
bar([2,6,10,14], [z1cp[1], z2cp[1], z3cp[1], z4cp[1]] ./ 1000, color = [122,1,119] ./ 255, width = 1.0, label = "\$\\lambda D\$")
bar([3,7,11,15], [z1cp[2] + z1cp[3], z2cp[2] + z2cp[3], z3cp[2] + z3cp[3], z4cp[2] + z4cp[3]] ./ 1000, color = [15,170,160] ./ 255, width = 1.0,label = "\$\\lambda W\$" )
bar([3,7,11,15], [z1cp[3], z2cp[3], z3cp[3], z4cp[3]] ./ 1000, color = [40,190,90] ./ 255, width = 1.0,label = "\$\\sum_{i}\\Pi_{i}\$" )
#annotate("infeas.", [2.0 - 0.6, 52], rotation = 90, color = "black")
#annotate("infeas.", [6.0 - 0.6, 52], rotation = 90, color = "black")

legend(loc = "upper right", fancybox = false, edgecolor = "black", framealpha = 0.9, ncol = 2)
savefig(string("plots_final//payments$(ures_pen).pdf"), format = :pdf)
